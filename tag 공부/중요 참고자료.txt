DTO - 데이터 전송 객체

	user : 요청 시 입력 데이터 -> DTO에 담아서 Controller로 전달.
  요청 | | 응답
	C : DTO로 받은 데이터를 M로 전달하여 작업 수행 -> servlet(user로부터 요청 시 데이터 / 응답시 데이터 전송)
M		V
| | : DAO로 비지니스 로직 수행(데이터를 조회 / 추가 / 삭제) -> 로직을 코딩으로 작성하기 전, 인터페이스로 설계후 작성하자
DB

DAO -> QueryExecutor -> Mapper.xml -> DB

	- 각 기능을 담당하는 인터페이스 설계 -> 이를 구현한 클레스 생성.
	- 구현 클래스 내부에 기능을 정의하는데, 이는 mapper(DB 내부에 데이터 조작)를 통해 
	  DB 내데이터를 변경한다.
mapper - Mybatis 프레임워크
	- mapper.xml
		- resultMap 태그 : 객체 멤버변수와 DB 컬럼을 연결
		- select, insert, update, delete 각 sql 작성 태그.(쿼리 실행 태그)











공부할 개념
1. 지네릭 메서드

- DB 연동관련 기술.
-> JDBC ->대체 MyBatis 프레임워크
2. mapper 

3. 쿠키 세션 캐시란
쿠키, 세션, 캐시는 웹 애플리케이션에서 사용되는 데이터 저장 기술입니다.

쿠키(Cookie)
쿠키는 서버가 클라이언트에 저장하는 작은 데이터 파일입니다. 쿠키는 클라이언트가 웹 사이트를 방문할 때 생성되며, 
브라우저에 저장됩니다. 쿠키는 주로 인증 정보나 사용자 환경 설정 등을 저장하는 데 사용됩니다.

웹브라우저 -> 홈페이지 요청 ->서버 -> 홈페이지 응답 + 쿠키 생성 요청 -> 웹브라우저에 쿠키 생성


세션(Session)
세션은 클라이언트와 서버 간의 연결을 유지하는 것을 의미합니다. 서버는 클라이언트에게 세션 ID를 제공하고,
클라이언트는 이 ID를 사용하여 서버와의 연결을 유지합니다. 세션은 주로 사용자 인증 정보나 장바구니 등을 저장
하는 데 사용됩니다.

캐시(Cache)
 캐시는 반복적으로 요청되는 데이터나 자원을 저장하는 임시 저장소입니다.
 캐시를 사용하면 웹 페이지 로딩 속도를 높일 수 있으며, 서버의 부하를 줄일 수 있습니다.
 브라우저는 이미 요청한 웹 페이지의 일부나 전체를 캐시로 저장하고, 다음에 해당 웹 페이지를 요청할 때는 캐시된
 데이터를 사용하여 웹 페이지를 빠르게 로딩할 수 있습니다.
 서버 측에서도 데이터나 자원을 캐시하여 처리 속도를 높일 수 있습니다.

이러한 데이터 저장 기술은 웹 애플리케이션의 성능과 보안에 중요한 역할을 합니다. 각각의 기술은 다른 목적으로 
사용되며, 올바르게 사용함으로써 웹 애플리케이션의 성능과 보안을 향상시킬 수 있습니다.

4. 트랜잭션이란?
트랜잭션(transaction)은 데이터베이스에서 수행되는 작업 단위를 말합니다.
데이터베이스에서는 여러 개의 트랜잭션이 동시에 수행될 수 있습니다.
각 트랜잭션은 데이터베이스에 있는 데이터를 읽거나 쓰는 작업을 수행하며, 이러한 작업들이 모두 성공적으로 수행되면
트랜잭션은 커밋(commit)되어 데이터베이스에 영구적으로 저장됩니다.

하지만, 트랜잭션 중간에 문제가 발생하면, 이전에 수행한 작업들을 모두 롤백(rollback)시켜 데이터베이스를 이전 상태로
되돌립니다. 이를 통해 데이터베이스의 무결성을 유지하고, 데이터 불일치 문제를 방지할 수 있습니다.

트랜잭션은 ACID 원칙에 따라 설계되어야 합니다. ACID 원칙은 Atomicity(원자성), Consistency(일관성), Isolation(격리성),
Durability(지속성)의 앞글자를 딴 것으로, 트랜잭션을 안전하게 수행하기 위한 가이드라인입니다.

5. Log4J란?
og4j (Log for Java)는 자바 언어용 로깅 유틸리티입니다. 로깅이란 애플리케이션의 실행 중에 발생하는 이벤트나 정보를
기록하는 것을 말합니다. Log4j를 사용하면 애플리케이션에서 발생하는 로그를 효율적으로 관리하고 분석할 수 있습니다.

Log4j는 로그를 여러 가지 레벨로 분류하고, 각 레벨마다 다른 방식으로 로그를 처리할 수 있습니다. 로그 레벨에는
TRACE, DEBUG, INFO, WARN, ERROR, FATAL 등이 있으며, 이 중 필요한 레벨만 선택하여 로그를 출력할 수 있습니다.

또한, Log4j는 다양한 출력 방식을 지원합니다. 파일, 콘솔, 데이터베이스 등에 로그를 저장하거나, 이메일이나 SNMP 
등의 프로토콜을 이용해 로그를 전송할 수 있습니다. 이를 통해 애플리케이션에서 발생하는 로그를 실시간으로 
모니터링하고, 문제가 발생할 경우 빠르게 대응할 수 있습니다.

Log4j는 Apache Software Foundation에서 개발하고 있는 오픈 소스 프로젝트로, Java 5부터 Java 8까지 지원하며,
Java 9 이후 버전에서는 Log4j 2.x를 사용할 수 있습니다. 최근에는 Log4j 2.x에서 발생한 심각한 취약점 문제로 
인해 업그레이드가 권장됩니다.

6. mybatis에서 insert 태그의 useGeneratedKeys 속성의 의미는?
MyBatis에서 <insert> 태그를 사용하여 데이터베이스에 새로운 레코드를 추가할 때, 해당 레코드의 기본 키(primary key)
 값을 자동으로 생성하고자 할 때 사용하는 속성입니다.

useGeneratedKeys 속성은 true 또는 false 값을 가질 수 있으며, 기본값은 false 입니다. useGeneratedKeys를 true로 설정하면
, insert 문이 실행된 후 자동으로 생성된 기본 키 값을 반환합니다.

만약 데이터베이스가 자동 생성되는 기본 키 값을 지원하지 않는다면, useGeneratedKeys 대신 keyProperty 속성을 사용하여
자동 생성된 키 값을 받아올 수 있는 프로퍼티를 지정할 수 있습니다. 이 경우, MyBatis는 insert 문 실행 후에 해당 프로퍼티
에 자동으로 생성된 키 값을 설정합니다.

예를 들어, 다음과 같은 <insert> 태그를 사용하여 새로운 레코드를 추가할 때, useGeneratedKeys 속성을 true로 설정하면,
 자동 생성된 기본 키 값을 받아올 수 있습니다.

xml
Copy code
<insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
  INSERT INTO user(name, email, phone) VALUES(#{name}, #{email}, #{phone})
</insert>
위의 예제에서 useGeneratedKeys는 true로 설정되어 있고, keyProperty는 id로 지정되어 있습니다. 따라서, insert 문이 
실행된 후 자동으로 생성된 기본 키 값을 id 프로퍼티에 설정하게 됩니다.

7. RequestDispatcher?
Request dispatcher는 웹 애플리케이션에서 요청(request)을 처리하는 역할을 하는 컴포넌트입니다. 요청 dispatcher는 
클라이언트의 요청(request)을 받아서 해당 요청을 처리하는 적절한 컴포넌트(서블릿, JSP 등)로 전달하고, 컴포넌트의 
실행 결과를 다시 클라이언트에 전송합니다.

대부분의 웹 애플리케이션 프레임워크에서는 요청 dispatcher가 내장되어 있습니다. 예를 들어, Java에서는 
Servlet Container(서블릿 컨테이너)가 요청 dispatcher 역할을 하며, PHP에서는 Apache Web Server와 함께 제공되는
 mod_php 모듈이 요청 dispatcher 역할을 합니다.

요청 dispatcher는 애플리케이션의 모든 요청 처리를 중앙 집중적으로 관리하므로, 애플리케이션의 유연성과 확장성을 
향상시키는 데 중요한 역할을 합니다.

8. fragment 속성이란?
커스텀 태그 방식에서 fragment 속성은 커스텀 태그의 속성(attribute) 중 하나로, JSP 페이지나 JSP fragment에 포함되는
 컨텐츠의 일부를 참조할 수 있도록 해주는 속성입니다.

일반적으로 커스텀 태그를 사용하면 JSP 페이지나 JSP fragment에서 태그를 사용할 때 해당 태그의 모든 컨텐츠가
 한 번에 처리됩니다. 그러나 fragment 속성을 사용하면 해당 태그의 일부분만을 선택적으로 처리할 수 있습니다.

fragment 속성을 사용할 때는 해당 속성의 값으로 선택하려는 컨텐츠를 식별할 수 있는 문자열을 지정합니다.
 커스텀 태그 라이브러리에서는 이 문자열을 사용하여 태그의 처리 대상이 되는 컨텐츠를 식별하고, 선택된 
컨텐츠만을 처리합니다.

예를 들어, 커스텀 태그 라이브러리에서 다음과 같은 태그를 정의했다고 가정해 봅시다.

python
Copy code
<mytag id="mytag1" fragment="content1" />

이 태그를 JSP 페이지에서 사용할 때 fragment="content1" 속성을 사용하면, 해당 태그의 id 속성값이 "mytag1"인
 부분 중에서 content1이라는 이름을 가진 컨텐츠만을 처리하게 됩니다. 즉, 태그의 처리 대상이 되는 컨텐츠가
 선택적으로 지정되는 것입니다.