객체 지향의 기초
- 추상화
    - 객체들의 공통적인 기능을 파악하고 이를 추상 클래스에 정의하여 이를 상속받은 클래스는 모두 공통기능
      을 사용할 수 있도록 한다.
    - 또한 설계의 개념으로 추상 클래스 또는 인터페이스 내부에 정의된 추상 메서드를 구현하도록 설계하여
      객체를 생성 및 관리할 수 있도록해준다.

- 캡슐화
    - 자주 변화되고 통제가 어려운 부분을 외부에서 접근하지 못하도록 정보를 은닉하는 것.
    - 멤버변수의 경우에도 캡슐화 하지 않을 경우, 외부의 접근에 무방비하여 값이 바뀌게 되면 오류가
      발생될 수 있으므로, 이를 캡슐화 해준다.
    - 이러한 캡슐화를 유지하기 위해 getter와 setter라는 표준화된 메서드로 값을 변경 및 조회한다.
    - 추가로 변수에 값을 대입할 경우, 대입만 가능하고 별도 중간에 대입되는 값에 대한 유효성 검증을 하기가
      어렵기 때문에 이를 통제하기 위해 캡슐화 해준다.

- 상속
    - 상속은 객체의 기능을 확장할 때 용이하게 사용되는 개념.
    - 부모 클래스로 부터 상속을 받은 자식 클래스의 객체는 부모 클래스의 자원을 모두 상속받게 되며,
      이를 추가하여 자식 클래스의 별도 자원도 추가하게 되어, 이를 확장해나갈 수 있다.

- 다형성
    - 상속 관계의 두 클래스의 경우, 상위 클래스 타입의 변수에 하위 클래스의 객체가 담길 수 있는데,
      이는 묵시적 형변환에 의해서  하위 클래스타입이 상위 클래스 타입으로 자동 형변환 되기 때문이다.
      이를 다형성이라 한다.



