2023.03.02
옵저버 패턴 

의존이란?
- 객체의 기능 구현을 다른 객체의 메서드를 통해서 구현함으로서 그 객체에 의존하는 것을 의미한다.
- 의존 객체의 메서드 구현 코드가 바뀌면 의존 하고 있는 객체의 기능도 바뀌게 된다.

옵저버 패턴의 주요 기능
- 일대다(ONE-TO-MANY) 의존성을 갖는다.
- 즉, 하나의 객체의 상태가 바뀌면 객체에 의존하는 다른 객체들에게 연락이 가고 자동으로 다른 객체
  들의 상태도 갱신되는 방식이다.
- 즉, 옵저버 패턴에서는 주제(subject)가 상태를 저장하고 제어하며 이는 하나의 객체만 존재한다.
  반면에 옵저버는 상태를 사용하지만, 소유할 필요는 없으므로 여러개의 옵저버 객체가 존재할 수 있으며,
  주제에서 상태가 바뀔 경우 바뀐 사실을 알려주기를 기다리며 주제에 의존적인 성질을 갖게된다.
- 하나의 객체 - 주제 / 여러 객체 - 옵저버

옵저버 패턴의 구조
 - 헤드 퍼스트 디자인 패턴 page.88 참고

느슨한 결합
- 옵저버 패턴은 주제에 옵저버가 의존하는 형태를 띄는데, 이러한 의존성은 정도가 작을수록 유연한
  디자인을 만들수 있으며, 유연한 객체지향 시스템을 구축할 수 있다.
- 이는 객체 지향 디자인의 원칙 중 하나로, 상호작용하는 객체 사이에는 가능하면 느슨한 결합을 사용
  해야 한다.
- 느슨한 결합은 변경사항이 생겨도 이를 유연하게 처리할 수 있는 유연한 객체 지향 시스템을 구축할 수
  있으며, 객체 사이의 상호의존성을 최소화할 수 있다.

옵저버 패턴은 느슨한 결합으로 디자인한 패턴.
1. 주제는 옵저버가 특정 인터페이스를 구현한다는 사실만 알고 있다.
2. 옵저버는 언제든지 새로 추가 또는 삭제가 가능하다.
    - 주제는 옵저버 인터페이스를 구현한 객체의 목록에만 의존하므로 언제든지 추가 / 삭제가 가능하다.
3. 새로운 형식의 옵저버를 추가할 때도 주제를 변경할 필요가 전혀 없다.
    - 주제는 옵저버 목록에만 의존하므로 어떤 클래스 형식이든 옵저버 인터페이스만 구현하면 된다.
4. 주제와 옵저버는 서로 독립적으로 재사용할 수 있다.
5. 주제나 옵저버가 달라져도 서로에게 영향을 미치지 않는다.

==========================================================================================

기상 모니터링 애플리케이션 개발(옵저버 패턴 실습)
1. 1차 구상도

습도 센서
온도 센서   -> 기상 스테이션 -> WeatherData 객체 -> Display 장비
기압 센서

- Display 장비에서 표시할 화면 3개 (currentConditionDisplay, statisticsDisplay, forecastDisplay)

2. 옵저버 패턴으로 기상 스테이션 설계하기
    - 헤드 퍼스트 디자인 패턴 page.91 참고
