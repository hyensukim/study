디자인 패턴
- 목적 : 유지보수가 용이한 코드를 만들기 위함.(유연성, 코드 재사용성, 기능의 확장성, 개발시간의 단축)

객체 지향 기초
	1. 추상화
		- 필요한 기능의 추상적인 이름만 정의하고 구체적인 기능은 숨기는것.
		- 설계의 개념으로 이해하자.
		- 이러한 설계를 기반으로 구체적인 기능과 상태를 정의하여 구현함으로서 고유한 객체를 생성한다.
		- 이처럼 설계에 의해 만들어진 객체는 유지보수 및 기능의 확장성의 개념에서 이점을 갖는다.

	2. 캡슐화
		- 클래스 내부에 자주 변경되어 통제가 어려운 부분은 캡슐화(encapsulation) 하여 클래스 외부에
		  서 접근하지 못하도록 통제하는 것.
		- 예상치 못한 오류가 발생하는 것을 방지할 수 있다.
		- 캡슐화된 부분은 getter와 setter 라는 표준화된 메서드를 통해 접근이 가능하다.
		- getter와 setter를 통해 접근함으로서 내부 필드값을 감추고, 제한이 가능하며, 필드값 변경 시
		  다른 작업을 수행할 수도 있다.
			- 필드에 직접 값을 대입 시 사이에 다른 작업을 하지 못한다.
		- 예를 들면, setter를 사용하여 필드 값의 유효성 검사를 할 수 있다.
		- 따라서 이러한 캡슐화 및 getter와 setter 메서드 사용은 객체의 안정성을 보장하기 위해 필수적
		  으로 사용되어야 한다.

	3. 상속
		- 객체의 기능 확장 시 중요하게 사용되는 개념이다.
		- 두 클래스에 상속이 적용되면, 상위 클래스와 하위클래스로 구분된다.
		- 상위 클래스의 자원은 모두 하위 클래스에게 상속되어, 하위 클래스의 객체 생성 시 내부에 어떠한
		  코드도 없더라도 상위 클래스의 자원을 사용할 수 있다.
		- 이게 가능한 이유는 매우 중요하다.
			- 하위 클래스의 객체 생성 시, 상위 클래스의 객체가 먼저 생성되기 때문이다.
			- 이는 내부적으로 하위 클래스 생성자 식 내부에 super()라는 상위 클래스 객체 생성자 메서드를
			  호출하도록 자동 추가되기 때문이다.
		3-1 인터페이스간의 상속
			- 인터페이스 간에도 상속이 가능하며, 상속 시에 extends라는 예약어로 상속을 한다.
			- 클래스 간의 상속과 다른점은 상위 개념이 하나이어야 하는 클래스와는 다르게 인터페이스는 
			  여러 인터페이스를 부모로 갖을 수 있다.(확장에 유리하다)

	4. 다형성
		- 상속 관계의 두 클래스의 경우, 상위 클래스 타입의 변수에 하위 클래스의 객체가 담길 수 있는데,
		  이는 묵시적 형변환에 의해 하위 클래스타입이 상위 클래스 타입으로 자동 형변환되기 때문이다.
		  이를 다형성이라고 한다.
		- 다형성은 클래스 간의 상속관계 뿐만아니라, 인터페이스 - 구현한 클래스 관계 및 인터페이스 간의
		  상속 관계에도 적용 되는 개념이다.