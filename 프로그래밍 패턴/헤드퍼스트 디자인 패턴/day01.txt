2023.02.28
헤드 퍼스트 디자인 패턴

기능의 확장을 위한 방법
- 상속
	- 상속은 superClass에 정의하기만 하면 하위 클래스에 상속되어 코드의 재사용성을 높여주고 기능을
	   확장해준다.
	- 하지만 기능 확장을 위해 상속을 사용하게되면, 이후에 코드의 변화에 유연하게 대처하지 못한다.

- 기능의 확장 및 코드의 재사용성을 높이기 위한 디자인 패턴이 '전략패턴'이다.

0. 디자인 원칙
	- 코드 중 바뀌는 부분은 그렇지 않은 부분과 분리 후 캡슐화 한다.
		-> 코드를 변경하는 과정에서 기존의 코드를 수정하는것이 최소화 되며, 변경하는 과정에서 의도치 않은 오류 발생의 가능성을 줄여준다.
		-> 분리해 놓음으로서 기능을 확장할 때에도 그 부분만 수정하면 된다.
		-> 코드의 재사용성이 올라간다.
	- 구현보다는 인터페이스(상위 형식)에 맞춰서 프로그래밍 한다.
		-> 다형성을 이용해 인터페이스를 구현한 클래스의 객체는 모두 사용이 가능하다.
		-> 기능의 확장에 유리함.
	- 상속보다는 구성을 활용한다.
		-> 객체 내부에 기능을 직접 구현할 필요 없이 구현한 클래스 타입의 변수로 구성하여 해당 기능을
		   사용하게 됨으로서 좀 더 프로그램의 유지보수가 좀 더 쉬워진다.

1. 전략패턴
	- 객체의 기능을 별도의 인터페이스로 추상화및 이를 구현한 알고리즘군을 정의한다.
	- 알고리즘 군을 캡슐화함으로서 내부 클래스들을 개별적으로 수정하여 쓸 수 있도록 해준다.
	- 이러한 패턴을 사용하면, 기능의 확장 및 코드의 재사용성이 올라가게 된다.
	- 추가로 동적으로 변화를 주기 위해 인터페이스 타입의 변수로 선언한 뒤 , setter 메서드를 정의해준다.