2023.02.28
헤드 퍼스트 디자인 패턴

※ 전략 패턴 사용 이유
- 상속은 기능의 확장을 통해 코드의 재사용성을 높혀준다.
- 하지만 상속을 통해 확장(상위 클래스의 코드를 수정하여 하위 클래스에도 자동으로 바뀌도록 하는것)하는 것은 큰 단점을 갖는다.
- 특정 기능을 상속받지 않아야 할 하위 클래스가 존재할 경우 별도로 내부 코드를 수정해줘야 하기 때문에 변경사항이 발생할 때마다
  해당 사항들을 확인해주고 필요시 수정해줘야하므로 유지보수에 취약하다.
- 이러한 문제를 해결하기 위한것이 전략 패턴이다.

0. 객체 지향의 원칙
- 바뀌는 부분만 캡슐화 해준다.(캡슐화)
- 상속보다는 구성을 활용한다.
- 구현보다는 인터페이스에 맞춰서 프로그래밍한다.(추상화, 다형성)

1. 전략패턴

1) 프로그램(어플리케이션)의 기능에서 자주 바뀌는 부분과 그렇지 않은 부분을 예측하여 분리하고 자주 바뀌는 부분은 별도의
   인터페이스로 설계한 뒤 이를 구현한 클래스 집합을 따로 만들어준다.(캡슐화)
   	- 유지보수에 유리 : 나중에 바뀌지 않는 부분에는 영향을 미치지 않고 그 부분만 고치거나 확장할 수 있다.
	- 코드의 재사용성 및 유연성 증가 : 프로그램 객체에 직접 기능을 구현하는 것이 아니라, 별도의 인터페이스 하위 클래스에
	  기능을 구현함으로서 코드를 재사용할 수 있고, 기능 수정시 행동객체만 바꾸어 기능을 바꿀수 있도록 유연성을 증가시켜준다.
	- 다른 형식의 객체에서도 캡슐화한 기능을 재사용할 수 있다.(코드의 재사용성)

2) 구현보다는 인터페이스에 맞추어 프로그래밍 한다.
	- 필요 기능을 구현한 클래스타입의 변수 선언 시, 인터페이스나 추상 클래스와 같은 상위 형식의 타입으로 선언해라.
	- 그러면, 다형성에 의해 상위 형식을 구현한 모든 하위 객체들을 사용할 수 있게 된다.(확장에 유리)

3) 상속보다는 구성(Composition)을 활용한다.
	- 클래스(A) 내부에 캡슐화 된 기능 클래스(B)를 상위 형식의 변수로 선언한다. -> A 에 B가 있다.
	- 위처럼 두 클래스를 합치는 것을 구성을 이용한다라고 한다.
	- 즉, 기능을 상속 받기 보다는 필요한 행동 객체로 구성된 프로그램은 유연성이 크게 향상된다. 

- 일련의 기능 클래스들을 알고리즘군 이라고 하자!
* 정리 : 전략 패턴(Stratrgy Pattern)은 알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정하여 쓸 수 있도록 한다.
전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.
