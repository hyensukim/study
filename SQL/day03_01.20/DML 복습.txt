DLM 데이터 조작어
- INSERT 문 : 데이터 추가
- DELETE 문 : 데이터 삭제
- UPDATE 문 : 데이터 수정
- SELECT 문(질의어) : 데이터 검색

※ SELECT문이 가장 중요하다.
	- SELECT문은 질의어라고도 한다. SQL의 가장 핵심 문법이며, 데이터 베이스
	  내부의 데이터를 검색하는 역할을 한다.
==

SELECT 문 문법
1. 기본 구조
	- 기본값 : 별도로 명시하지 않으면, 해당 값이 적용.
	- [ ] : 선택사항(없어도 오류 X)
	- | : 옵션(사용 시 고르는 것)

SELECT [ ALL(기본값) | DISTINCT ] 속성명(들) | 테이블명.*
FROM 테이블명(들)
[ WHERE 검색 조건(들) ]
[ GROUP BY 속성명 ] 
[ HAVING 검색 조건(들) ]
[ ORDER BY 속성명 [ ASC | DESC ] 

	- SELECT 속성명 : 검색할 속성명 선택
	- ALL : 전체 레코드
	- DISTINCT : 중복 제거된 레코드
	- 테이블명.* : 모든 속성 검색.(모든 컬럼)
	- FROM 테이블명 : 검색할 테이블 선택 
	- WHERE 조건식 : SELECT문 속성 FILTER(조건식에 맞는 데이터만 검색)
	- GROUP BY 속성명 : 해당 속성의 데이터가 중복되는 레코드끼리 묶어 검색.
	- HAVING 조건식 : GROUP된 속성 FILTER(조건식에 맞는 데이터만 검색)
	- ORDER BY 속성명 ASC | DESC : 정렬(오름차순 | 내림차순)

2. 자세한 구조
SELECT [ ALL | DISTINCT ] [ 테이블명. ] * | 속성명 [ [AS] 속성별칭]
FROM 테이블명 [ [AS] 테이블별칭]
[ [INNER JOIN | LEFT [OUTER] JOIN | RIGHT [OUTER] JOIN 테이블명
	ON 검색조건] | [FULL [OUTER] JOIN 테이블명] ]
[ WHERE 검색조건 ]
[ GROUP BY 속성명 ]
[ HAVING 검색조건 ]
[ 질의 UNION 질의 | 질의 UNION ALL 질의 ] // 합집합
[ ORDER BY 속성명 [ASC | DESC] ]
==

WHERE 조건
- 조건식에 맞는 데이터를 검색하기 위해 사용.
1. 비교
	= : 같다 , <> : 다르다(!=)
2. 범위
	BETWEEN A AND B : A이상 B이하 범위 데이터 검색
3. 집합
	WHERE 속성명 IN(A,B) : 교집합(A 또는 B) 검색
	WHERE 속성명 NOT IN(A,B) : 차집합(A 또는 B가 아닌) 검색
	WHERE 속성명 UNION WHERE 속성명 : 합집합 검색
4. 패턴
- 문자열 검색, LIKE와 함께 사용하는 와일드 문자
	LIKE '검색어'; : 검색어와 일치하는 패턴의 데이터 검색.
	LIKE '%검색어'; : 검색어가 문자열 맨 뒤에 위치한 데이터 검색.
	LIKE '검색어%'; : 검색어가 문자열 맨 앞에 위치한 데이터 검색.
	LIKE '%검색어%'; : 검색어가 문자열 중간(앞,뒤 포함)에 위치한 데이터 검색.
	LIKE '_검색어%' : 한문자를 대체한 다음의 검색어가 맨 앞에 위치한 데이터 검색.
				_ : 와일드 카드, 한문자 대체, EX) 축구,야구,농구 = _구
5.  NULL
- 데이터가 없는 값.(값을 추가하지 않은 경우)
- 0과 ''빈값과는 다른값.
- IS NULL, IS NOT NULL
- NULL은 집계함수로 사용하지 못하는 값으로 크기도 비교 못하므로, NULL
  데이터 검색 시 IS NULL과 IS NOT NULL을 사용해야 한다.
※ 집계함수 : COUNT()와같이 컬럼 갯수 확인 시 NULL값은 포함 X
6. 복합 조건
- AND, OR, NOT 복합 조건
- 일반적으로 OR 연산자는 많이 사용 X -> 대신 IN을 많이 사용.(집합)

==

집계함수와 GROUP BY
1. 집계 함수(통계) - 스칼라(단일값)를 반환.
	SUM(속성명) : 총합
	COUNT(속성명) : 컬럼 내 데이터 갯수
	AVG(속성명) : 평균
	MAX(속성명) : 최대값
	MIN(속성명) : 최소값

2. GROUP BY
- 컬럼 내 값이 같은 레코드가 하나의 그룹을 만든다.
- HAVING : GROUP BY 절로 묶은 데이터의 필터 역할.
	* 주의사항
		- GROUP BY 속성명 -> 해당 속성은 SELECT 절에 묶인 속성이다.
		- 항상 GROUP BY 절 아래에 위치.
		- 맨 뒤에 와야한다.
		- 검색 조건으로 집계함수가 와야한다.(단일값)
==

두개 이상의 테이블에서 SQL 질의(검색)
- SQL은 여러 개의 테이블을 질의하는 두가지 방법을 제공한다.
- JOIN & SUBQuery
1. 조인(JOIN)
	1) 일반조인
	- 한 테이블에 다른 테이블의 속성을 결합하는 연산.
	- 동등 조인 : 동등한 속성을 통해 두 테이블을 결합하는 것.
	- 동등 조인 시 일반적으로 외래키를 통해 연결한다.
		WHERE 테이블명1.동등속성 = 테이블명2. 동등속성
	- 동등 조인은 3개 이상 연결이 가능하다.(복합조건 AND 연산자)
	※표준 형태※
	FROM  테이블명1 INNER  JOIN 테이블명2;
	ON 테이블명1.동등속성 = 테이블명2. 동등속성
	
	2) 외부조인
	- 한쪽에 데이터가 있고, 다른쪽에 없는 경우 데이터가 있는 쪽의
	  테이블을 모두 출력하고 싶은 경우 사용.
	- 조건에 맞지 않아도 해당하는 행을 출력하고 싶을 때 사용
	- 종류
		LEFT [OUTER] JOIN
		RIGHT [OUTER] JOIN
		FULL [OUTER] JOIN -> MySQL에서는 지원 X

2. 부속질의
- 질의문(SELECT) 안에 질의문(SELECT)
	1) 스칼라 부속질의(SELECT 부속질의)
		- 스칼라 : 단일값만 검색
	2) 인라인 뷰(FROM 부속질의)
		- 가상의 테이블, 여러 데이터 검색 가능
	3) 중첩 질의(WHERE 부속질의)
		- 스칼라값 + 여러데이터
		- 비교연산 시, 스칼라값 검색
		- 집합 조건 시, 여러값 검색

==

집합 연산
- 교집합 (IN)
- 차집합 (NOT IN)
- 합집합 (UNION)
	- 중복 허용 : UNION ALL

EIXIST(잘 사용 안함)
	
==

데이터 조작어 삽입, 수정, 삭제

1. INSERT문(데이터 추가)
	- INSERT INTO 테이블명 (컬럼명, ...) VALUES(값, ...)
		- 컬럼명과 값 순서 매칭
2. UPDATE문(데이터 수정)
	- UPDATE 테이블명
		SET 컬럼명 = 값,
			컬럼명 = 값, ...
		WHERE 조건식;
	- 의도치 않은 데이터 수정을 방지하기 위해 조건 추가
3. DELETE문(데이터 삭제)
	- DELETE FROM 테이블명
		WHERE 조건식; 
	- 의도치 않은 데이터 삭제를 방지하기 위해 조건 추가



